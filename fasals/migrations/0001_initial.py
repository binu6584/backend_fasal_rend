# Generated by Django 4.1.3 on 2022-11-13 17:07

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AboutChemicalFertilizer',
            fields=[
                ('id', models.IntegerField()),
                ('trade_name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('formulation', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
                ('price', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_chemical_fertilizer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutDisease',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('common_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'about_disease',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutFieldPreparation',
            fields=[
                ('type', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
                ('procedure', models.CharField(blank=True, max_length=1000, null=True)),
                ('id', models.IntegerField()),
            ],
            options={
                'db_table': 'about_field_preparation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutNutrientDeficiency',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('common_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_nutrient_deficiency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutOrganicManure',
            fields=[
                ('trade_name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_organic_manure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutPest',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('common_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_pest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutRodent',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('common_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_rodent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutSoil',
            fields=[
                ('type', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
                ('states', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_soil',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AboutWeed',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('common_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('crops', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'about_weed',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=1000)),
                ('password', models.CharField(max_length=1000)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('fname', models.CharField(blank=True, max_length=1000, null=True)),
                ('address', models.CharField(blank=True, max_length=1000, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('distt', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(blank=True, max_length=1000, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('photo', models.CharField(blank=True, max_length=1000, null=True)),
                ('usertype', models.CharField(blank=True, max_length=100, null=True)),
                ('permission', models.CharField(blank=True, max_length=1000, null=True)),
                ('createdat', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'admin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChemicalFertilizer',
            fields=[
                ('crop_id', models.IntegerField()),
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('trade_name', models.CharField(max_length=1000)),
                ('cycle', models.CharField(blank=True, max_length=1000, null=True)),
                ('amount', models.CharField(blank=True, max_length=1000, null=True)),
                ('amount_min', models.FloatField(blank=True, null=True)),
                ('amount_max', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'chemical_fertilizer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Climate',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, max_length=1000, null=True)),
                ('temperature', models.CharField(blank=True, max_length=1000, null=True)),
                ('rainfall', models.CharField(blank=True, max_length=1000, null=True)),
                ('humidity', models.CharField(blank=True, max_length=1000, null=True)),
                ('temperature_min', models.FloatField(blank=True, null=True)),
                ('temperature_max', models.FloatField(blank=True, null=True)),
                ('rainfall_min', models.FloatField(blank=True, null=True)),
                ('rainfall_max', models.FloatField(blank=True, null=True)),
                ('humidity_min', models.FloatField(blank=True, null=True)),
                ('humidity_max', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'climate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('species', models.CharField(blank=True, max_length=1000, null=True)),
                ('category', models.CharField(blank=True, max_length=1000, null=True)),
                ('season', models.CharField(blank=True, max_length=1000, null=True)),
                ('botanical_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('genus', models.CharField(blank=True, max_length=1000, null=True)),
                ('family', models.CharField(blank=True, max_length=1000, null=True)),
                ('origin', models.CharField(blank=True, max_length=1000, null=True)),
                ('synonym', models.CharField(blank=True, max_length=1000, null=True)),
                ('rotations', models.CharField(blank=True, max_length=1000, null=True)),
                ('cropimage', models.CharField(blank=True, max_length=1000, null=True)),
                ('average_yield', models.CharField(blank=True, max_length=1000, null=True)),
                ('yield_min', models.FloatField(blank=True, null=True)),
                ('yield_max', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'crop',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CropPattern',
            fields=[
                ('crop_id', models.IntegerField(primary_key=True, serialize=False)),
                ('intercrop', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'crop_pattern',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('type', models.CharField(blank=True, max_length=1000, null=True)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('common_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('disease_image', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'disease',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FieldPreparation',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=1000)),
                ('procedure', models.CharField(blank=True, max_length=1000, null=True)),
                ('schedule', models.CharField(max_length=1000)),
            ],
            options={
                'db_table': 'field_preparation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(blank=True, max_length=1000, null=True)),
                ('notification_title', models.CharField(blank=True, max_length=1000, null=True)),
                ('notification_body', models.CharField(blank=True, max_length=1000, null=True)),
                ('days_gap_after_sowing_min', models.IntegerField(blank=True, null=True)),
                ('related_to_activity', models.CharField(blank=True, max_length=1000, null=True)),
                ('days_gap_after_sowing_max', models.IntegerField(blank=True, null=True)),
                ('cropid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'notification_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NutrientDeficiency',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'nutrient_deficiency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrganicManure',
            fields=[
                ('crop_id', models.IntegerField()),
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('trade_name', models.CharField(max_length=1000)),
                ('cycle', models.CharField(blank=True, max_length=1000, null=True)),
                ('amount', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'organic_manure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pest',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
                ('pest_image', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'pest',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PortalCoreUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=200)),
                ('password', models.CharField(max_length=200)),
                ('email', models.CharField(max_length=200)),
                ('created_on', models.DateField()),
                ('last_login', models.DateField()),
            ],
            options={
                'db_table': 'portal_core_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rodent',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('symptoms', models.CharField(blank=True, max_length=1000, null=True)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'rodent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_number', models.CharField(max_length=1000, unique=True)),
                ('first_name', models.CharField(max_length=1000)),
                ('last_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('state', models.CharField(max_length=1000)),
                ('password', models.CharField(max_length=1000)),
            ],
            options={
                'db_table': 'user_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VarietiesInState',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('varieties', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'varieties_in_state',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variety',
            fields=[
                ('state', models.CharField(blank=True, max_length=1000, null=True)),
                ('variety_name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('seed_rate', models.CharField(blank=True, max_length=1000, null=True)),
                ('sowing_time', models.CharField(blank=True, max_length=1000, null=True)),
                ('duration', models.CharField(blank=True, max_length=1000, null=True)),
                ('average_yield', models.CharField(blank=True, max_length=1000, null=True)),
                ('height', models.CharField(blank=True, max_length=1000, null=True)),
                ('features', models.CharField(blank=True, max_length=1000, null=True)),
                ('suitable_regions', models.CharField(blank=True, max_length=1000, null=True)),
                ('tolerant_to', models.CharField(blank=True, max_length=1000, null=True)),
                ('added', models.DateTimeField(blank=True, null=True)),
                ('v_image', models.CharField(blank=True, max_length=1000, null=True)),
                ('seed_rate_min', models.IntegerField(blank=True, null=True)),
                ('seed_rate_max', models.IntegerField(blank=True, null=True)),
                ('duration_min', models.IntegerField(blank=True, null=True)),
                ('duration_max', models.IntegerField(blank=True, null=True)),
                ('average_yield_min', models.FloatField(blank=True, null=True)),
                ('average_yield_max', models.FloatField(blank=True, null=True)),
                ('height_min', models.FloatField(blank=True, null=True)),
                ('height_max', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'variety',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Weed',
            fields=[
                ('state', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('measures', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'weed',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Soil',
            fields=[
                ('crop', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='fasals.crop')),
                ('state', models.CharField(max_length=1000)),
                ('type', models.CharField(max_length=1000)),
                ('water_content', models.CharField(blank=True, max_length=1000, null=True)),
                ('ph', models.CharField(blank=True, max_length=1000, null=True)),
                ('water_content_min', models.IntegerField(blank=True, null=True)),
                ('water_content_max', models.IntegerField(blank=True, null=True)),
                ('ph_min', models.FloatField(blank=True, null=True)),
                ('ph_max', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'soil',
                'managed': False,
            },
        ),
    ]
